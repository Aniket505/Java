import java.util.*;

class MaxPQ<Key extends Comparable<Key>>{
    private Key[] pq;
    private int N;
    
    public MaxPQ(int capacity)
    {
        pq = (Key[]) new Comparable[capacity + 1];
    }
    
    public boolean isEmpty()
    {
        return N==0;
    }
    
    public void insert(Key key)
    {
        pq[++N] = key;
        swim(N);
    }
    
    public Key delMax()
    {
        Key max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;
        
    }
    
    private void swim(int k)
    {
        while(k > 1 && less(k/2 , k))
        {
            exch(k , k/2);
            k = k/2;
        }
    }
    
    private void sink(int k)
    {
        while(2*k <= N)
        {
            int j = 2*k;
            
            if(j < N && less(j, j+1))
                j++;
                
            if(!less(k, j))
                break;
            
            exch(k , j);
            
            k = j;
        }
    }
    
    private boolean less(int i , int j)
    {
        return pq[i].compareTo(pq[j]) < 0 ;
    }
    
    private void exch(int i , int j)
    {
        Key t = pq[i];
        pq[i] = pq[j];
        pq[j] = t;
    }
    
    public void print()
    {
        for(int i = 1 ; i <= N ; i++)
        {
            System.out.println(pq[i]);
        }
    }
}

public class Main
{
	public static void main(String[] args) {
		MaxPQ<Integer> pq = new MaxPQ<Integer>(3);
		pq.insert(10);
		pq.insert(20);
		pq.insert(30);
		pq.print();
		System.out.println();
		System.out.println();
		
		System.out.println(pq.delMax());
		System.out.println(pq.delMax());
		System.out.println(pq.delMax());
	}
}
