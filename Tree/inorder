/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Recursive Solution

/*class Solution {
    List<Integer> ans = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
        inorder(root);
        return ans;
    }
    void inorder(TreeNode root)
    {
        if(root == null)
            return ;
        
        inorder(root.left);
        
        ans.add(root.val);
        
        inorder(root.right);
    }
}*/

// Iterative Solution

class Solution {
    List<Integer> ans = new ArrayList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root)
    {
        Stack<TreeNode> st = new Stack<TreeNode>();
        TreeNode node = root;
        
        while(true)
        {
            if(node != null)
            {
                st.push(node);
                node = node.left;
            }
            else
            {
                if(st.isEmpty())
                    break;
                else
                {
                    node = st.pop();
                    ans.add(node.val);
                    node = node.right;
                }
            }
        }
        return ans;
    }
}
