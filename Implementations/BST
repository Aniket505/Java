class BST<K extends Comparable<K>, V>
{
    private Node root;
    
    public void del(K key) {
		root = del(key, root);
	}
    
    private Node del(K key, Node n) {
	
		if (n == null) {
			return null;
		}
		
		int cmp = key.compareTo(n.key);
		
		if (cmp > 0)
			return del(key, n.right);
		
		if (cmp < 0)
			return del(key, n.left);
		
		if (n.right == null)
			return n.left;
		
		if (n.left == null)
			return n.right;
		
		Node x = min(n.right);
		
		x.right = delMin(n.right);
		
		x.left = n.left;
		
		return x;
	}
    
    public void insert(K key, V data)
    {
        root = insert(key, data, root);
    }
    
    private Node insert(K key, V data, Node n)
    {
        if(n == null)
            return new Node(key,data);
            
        int cmp = key.compareTo(n.key);
        
        if(cmp == 0)
        {
            n.data = data;
        }
        else if(cmp > 0)
        {
            n.right = insert(key, data, n.right);
        }
        else
        {
            n.left = insert(key, data, n.left);
        }
        
        n.size = 1 + sizeOf(n.left) + sizeOf(n.right);
        
        return n;
    }
    
    public V search(K key) {
		Node result = search(key, root);
		if (result == null)
			return null; 
		return result.data; 
	}
	
	private Node search(K key, Node n) {
		if (n == null)
			return null;
		int cmp = key.compareTo(n.key);
		if (cmp == 0)
			return n;
		if (cmp > 0)
			return search(key, n.right);
		return search(key, n.left);
	}
    
    private int sizeOf(Node n)
    {
        return n == null ? 0 : n.size;
    }
    public int size()
    {
        return sizeOf(root);
    }
    
    class Node{
        private K key;
        private V data;
        private Node left;
        private Node right;
        private int size;
        public Node(K key , V data)
        {
            this.key = key;
            this.data = data;
            this.left = null;
            this.right = null;
            this.size = 1;
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		BST<Integer, String> b = new BST<>();
		b.insert(5, "i m 5");
		b.insert(3, "i m 3");
		b.insert(4, "i m 4");
		b.insert(2, "i m 2");
		b.insert(18, "i m 8");
		b.insert(7, "i m 7");
		b.insert(8, "i m 7");
		b.insert(9, "i m 7");
		
	}
}
